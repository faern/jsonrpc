var searchIndex = {};
searchIndex["jsonrpc"] = {"doc":"Parity JSON-RPC 2.0 Implementation","items":[],"paths":[]};
searchIndex["jsonrpc_core"] = {"doc":"Transport agnostic jsonrpc library.","items":[[3,"IoHandler","jsonrpc_core","Simplified `IoHandler` with no `Metadata` associated with each request.",null,null],[3,"MetaIoHandler","","Request handler",null,null],[3,"NoopMiddleware","","No-op middleware implementation",null,null],[4,"RemoteProcedure","","Possible Remote Procedures with Metadata",null,null],[13,"Method","","A method call",0,null],[13,"Notification","","A notification",0,null],[13,"Alias","","An alias to other method,",0,null],[4,"Compatibility","","`IoHandler` json-rpc protocol compatibility",null,null],[13,"V1","","Compatible only with JSON-RPC 1.x",1,null],[13,"V2","","Compatible only with JSON-RPC 2.0",1,null],[13,"Both","","Compatible with both",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compatibility"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"with_compatibility","","Creates new `MetaIoHandler` compatible with specified protocol version.",2,{"inputs":[{"name":"compatibility"}],"output":{"name":"self"}}],[11,"new","","Creates new `MetaIoHandler`",2,{"inputs":[{"name":"compatibility"},{"name":"s"}],"output":{"name":"self"}}],[11,"with_middleware","","Creates new `MetaIoHandler` with specified middleware.",2,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"add_alias","","Adds an alias to a method.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"add_method","","Adds new supported synchronous method",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_async_method","","Adds new supported asynchronous method",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_notification","","Adds new supported notification",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_method_with_meta","","Adds new supported asynchronous method with metadata support.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_notification_with_meta","","Adds new supported notification with metadata support.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"extend_with","","Extend this `MetaIoHandler` with methods defined elsewhere.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"option"}}],[11,"handle_request","","Handle given request asynchronously.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"boxfuture"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"iohandler"}}],[11,"new","","Creates new `IoHandler` without any metadata.",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_compatibility","","Creates new `IoHandler` without any metadata compatible with specified protocol version.",3,{"inputs":[{"name":"compatibility"}],"output":{"name":"self"}}],[11,"handle_request","","Handle given request asynchronously.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"boxfuture"}}],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",2,{"inputs":[{"name":"iohandler"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"noop"}}],[11,"on_request","","",4,{"inputs":[{"name":"self"},{"name":"request"},{"name":"m"},{"name":"f"}],"output":{"name":"futureresponse"}}],[0,"types","","JSON-RPC types",null,null],[4,"Value","jsonrpc_core::types","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",5,null],[13,"Bool","","Represents a JSON boolean.",5,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",5,null],[13,"String","","Represents a JSON string.",5,null],[13,"Array","","Represents a JSON array.",5,null],[13,"Object","","Represents a JSON object.",5,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"error","","jsonrpc errors",null,null],[3,"Error","jsonrpc_core::types::error","Error object as defined in Spec",null,null],[12,"code","","Code",6,null],[12,"message","","Message",6,null],[12,"data","","Optional data",6,null],[4,"ErrorCode","","JSONRPC error code",null,null],[13,"ParseError","","Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.",7,null],[13,"InvalidRequest","","The JSON sent is not a valid Request object.",7,null],[13,"MethodNotFound","","The method does not exist / is not available.",7,null],[13,"InvalidParams","","Invalid method parameter(s).",7,null],[13,"InternalError","","Internal JSON-RPC error.",7,null],[13,"ServerError","","Reserved for implementation-defined server-errors.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"code","","Returns integer code value",7,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"description","","Returns human-readable description",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"new","","Wraps given `ErrorCode`",6,{"inputs":[{"name":"errorcode"}],"output":{"name":"self"}}],[11,"parse_error","","Creates new `ParseError`",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_request","","Creates new `InvalidRequest`",6,{"inputs":[],"output":{"name":"self"}}],[11,"method_not_found","","Creates new `MethodNotFound`",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_params","","Creates new `InvalidParams`",6,{"inputs":[{"name":"m"}],"output":{"name":"self"}}],[11,"internal_error","","Creates new `InternalError`",6,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_version","","Creates new `InvalidRequest` with invalid version description",6,{"inputs":[],"output":{"name":"self"}}],[0,"id","jsonrpc_core::types","jsonrpc id field",null,null],[4,"Id","jsonrpc_core::types::id","Request Id",null,null],[13,"Null","","No id (notification)",8,null],[13,"Str","","String id",8,null],[13,"Num","","Numeric id",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"params","jsonrpc_core::types","jsonrpc params field",null,null],[4,"Params","jsonrpc_core::types::params","Request parameters",null,null],[13,"Array","","Array of values",9,null],[13,"Map","","Map of values",9,null],[13,"None","","No parameters",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"parse","","Parse incoming `Params` into expected types.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"request","jsonrpc_core::types","jsonrpc request",null,null],[3,"MethodCall","jsonrpc_core::types::request","Represents jsonrpc request which is a method call.",null,null],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",10,null],[12,"method","","A String containing the name of the method to be invoked.",10,null],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",10,null],[12,"id","","An identifier established by the Client that MUST contain a String, Number, or NULL value if included. If it is not included it is assumed to be a notification.",10,null],[3,"Notification","","Represents jsonrpc request which is a notification.",null,null],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",11,null],[12,"method","","A String containing the name of the method to be invoked.",11,null],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",11,null],[4,"Call","","Represents single jsonrpc call.",null,null],[13,"MethodCall","","Call method",12,null],[13,"Notification","","Fire notification",12,null],[13,"Invalid","","Invalid call",12,null],[4,"Request","","Represents jsonrpc request.",null,null],[13,"Single","","Single request (call)",13,null],[13,"Batch","","Batch of requests (calls)",13,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"methodcall"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"notification"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"notification"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"response","jsonrpc_core::types","jsonrpc response",null,null],[3,"Success","jsonrpc_core::types::response","Successful response",null,null],[12,"jsonrpc","","Protocol version",14,null],[12,"result","","Result",14,null],[12,"id","","Correlation id",14,null],[3,"Failure","","Unsuccessful response",null,null],[12,"jsonrpc","","Protocol Version",15,null],[12,"error","","Error",15,null],[12,"id","","Correlation id",15,null],[4,"Output","","Represents output - failure or success",null,null],[13,"Success","","Success",16,null],[13,"Failure","","Failure",16,null],[4,"Response","","Synchronous response",null,null],[13,"Single","","Single response",17,null],[13,"Batch","","Response to batch request (batch of responses)",17,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"success"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"success"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"failure"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"failure"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"from","","Creates new output given `Result`, `Id` and `Version`.",16,{"inputs":[{"name":"result"},{"name":"id"},{"name":"option"}],"output":{"name":"self"}}],[11,"invalid_request","","Creates new failure output indicating malformed request.",16,{"inputs":[{"name":"id"},{"name":"option"}],"output":{"name":"self"}}],[11,"deserialize","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"deserialize","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","Creates new `Response` with given error and `Version`",17,{"inputs":[{"name":"error"},{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"failure"}],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"name":"success"}],"output":{"name":"self"}}],[0,"version","jsonrpc_core::types","jsonrpc version field",null,null],[4,"Version","jsonrpc_core::types::version","Protocol Version",null,null],[13,"V2","","JSONRPC 2.0",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[6,"FutureResponse","jsonrpc_core","Type representing middleware or RPC response before serialization.",null,null],[8,"Metadata","","Metadata trait",null,null],[8,"RpcMethodSync","","Synchronous Method",null,null],[10,"call","","Call method",19,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"result"}}],[8,"RpcMethodSimple","","Asynchronous Method",null,null],[10,"call","","Call method",20,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"boxfuture"}}],[8,"RpcMethod","","Asynchronous Method with Metadata",null,null],[10,"call","","Call method",21,{"inputs":[{"name":"self"},{"name":"params"},{"name":"t"}],"output":{"name":"boxfuture"}}],[8,"RpcNotificationSimple","","Notification",null,null],[10,"execute","","Execute notification",22,{"inputs":[{"name":"self"},{"name":"params"}],"output":null}],[8,"RpcNotification","","Notification with Metadata",null,null],[10,"execute","","Execute notification",23,{"inputs":[{"name":"self"},{"name":"params"},{"name":"t"}],"output":null}],[8,"Middleware","","RPC middleware",null,null],[10,"on_request","","Method invoked on each request. Allows you to either respond directly (without executing RPC call) or do any additional work before and/or after processing the request.",24,{"inputs":[{"name":"self"},{"name":"request"},{"name":"m"},{"name":"f"}],"output":{"name":"futureresponse"}}],[11,"get","jsonrpc_core::types","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a number that can be represented by i64.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a number that can be represented by u64.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, represent it as i64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, represent it as u64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","Serializes a json value into a string",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",5,null],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_iter","","Convert an iteratable type to a `Value`",5,{"inputs":[{"name":"i"}],"output":{"name":"value"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"value"}}],[11,"from","","Convert 32-bit floating point number to `Value`",5,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","Convert 64-bit floating point number to `Value`",5,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","Convert boolean to `Value`",5,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","Convert `String` to `Value`",5,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","Convert string slice to `Value`",5,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","Convert copy-on-write string to `Value`",5,{"inputs":[{"name":"cow"}],"output":{"name":"value"}}],[11,"from","","Convert map (with string keys) to `Value`",5,{"inputs":[{"name":"map"}],"output":{"name":"value"}}],[11,"from","","Convert a `Vec` to `Value`",5,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","Convert a slice to `Value`",5,null],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"value"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"value"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}]],"paths":[[4,"RemoteProcedure"],[4,"Compatibility"],[3,"MetaIoHandler"],[3,"IoHandler"],[3,"NoopMiddleware"],[4,"Value"],[3,"Error"],[4,"ErrorCode"],[4,"Id"],[4,"Params"],[3,"MethodCall"],[3,"Notification"],[4,"Call"],[4,"Request"],[3,"Success"],[3,"Failure"],[4,"Output"],[4,"Response"],[4,"Version"],[8,"RpcMethodSync"],[8,"RpcMethodSimple"],[8,"RpcMethod"],[8,"RpcNotificationSimple"],[8,"RpcNotification"],[8,"Middleware"]]};
searchIndex["jsonrpc_http_server"] = {"doc":"jsonrpc http server.","items":[[3,"Host","jsonrpc_http_server","Host type",null,null],[4,"DomainsValidation","","Specifies if domains should be validated.",null,null],[13,"AllowOnly","","Allow only domains on the list.",0,null],[13,"Disabled","","Disable domains validation completely.",0,null],[4,"AccessControlAllowOrigin","","Origins allowed to access",null,null],[13,"Value","","Specific hostname",1,null],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,null],[13,"Any","","Any non-null origin",1,null],[3,"Origin","","Request Origin",null,null],[0,"io","jsonrpc_http_server::tokio_core","I/O conveniences when working with primitives in `tokio-core`",null,null],[6,"IoFuture","jsonrpc_http_server::tokio_core::io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"Io","","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",2,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this I/O object may be writable.",2,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","Read in a list of buffers all at once.",2,null],[11,"write_vec","","Write a list of buffers all at once.",2,null],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",2,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",2,null],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[8,"Codec","","Encoding and decoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",3,null],[16,"Out","","The type of frames to be encoded.",3,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",3,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",3,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[10,"encode","","Encodes a frame into the buffer provided.",3,null],[3,"WriteHalf","","The writable half of an object returned from `Io::split`.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying `Io` object, using the `Codec` trait to encode and decode frames.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"EasyBufMut","","An RAII object returned from `get_mut` which provides mutable access to the underlying `Vec<u8>`.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"ReadHalf","","The readable half of an object returned from `Io::split`.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"name":"vec"}],"output":{"name":"readuntil"}}],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"EasyBuf","","A reference counted buffer of bytes.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[0,"net","jsonrpc_http_server::tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[8,"UdpCodec","jsonrpc_http_server::tokio_core::net","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",4,null],[16,"Out","","The type of frames to be encoded.",4,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",4,null],[10,"encode","","Encodes a frame into the buffer provided.",4,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[0,"reactor","jsonrpc_http_server::tokio_core","The core reactor driving all I/O",null,null],[3,"Core","jsonrpc_http_server::tokio_core::reactor","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"PollEvented","","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[4,"CorsHeader","jsonrpc_http_server","CORS Header Result.",null,null],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",5,null],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",5,null],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",5,null],[3,"ServerHandler","","jsonrpc http request handler.",null,null],[3,"Rpc","","RPC Handler bundled with metadata extractor.",null,null],[12,"handler","","RPC Handler",6,null],[12,"remote","","Remote",6,null],[12,"extractor","","Metadata extractor",6,null],[3,"ServerBuilder","","Convenient JSON-RPC HTTP Server builder.",null,null],[3,"Server","","jsonrpc http server instance",null,null],[4,"Error","","RPC Server startup error.",null,null],[13,"Io","","IO Error",7,null],[13,"Other","","Other Error (hyper)",7,null],[4,"RequestMiddlewareAction","","Action undertaken by a middleware.",null,null],[13,"Proceed","","Proceed with standard RPC handling",8,null],[12,"should_continue_on_invalid_cors","jsonrpc_http_server::RequestMiddlewareAction","Should the request be processed even if invalid CORS headers are detected? This allows for side effects to take place.",8,null],[13,"Respond","jsonrpc_http_server","Intercept the request and respond differently.",8,null],[12,"should_validate_hosts","jsonrpc_http_server::RequestMiddlewareAction","Should standard hosts validation be performed?",8,null],[12,"handler","","hyper handler used to process the request",8,null],[5,"is_host_allowed","jsonrpc_http_server","Returns `true` if Host header in request matches a list of allowed hosts.",null,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"bool"}}],[5,"cors_header","","Returns a CORS header that should be returned with that request.",null,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"corsheader"}}],[0,"request_response","","Basic Request/Response structures used internally.",null,null],[4,"Method","jsonrpc_http_server::request_response","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",9,null],[13,"Get","","GET",9,null],[13,"Post","","POST",9,null],[13,"Put","","PUT",9,null],[13,"Delete","","DELETE",9,null],[13,"Head","","HEAD",9,null],[13,"Trace","","TRACE",9,null],[13,"Connect","","CONNECT",9,null],[13,"Patch","","PATCH",9,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",9,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",10,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",10,null],[13,"Processing","","102 Processing [RFC2518]",10,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",10,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",10,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",10,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",10,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",10,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",10,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",10,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",10,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",10,null],[13,"ImUsed","","226 IM Used [RFC3229]",10,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",10,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",10,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",10,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",10,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",10,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",10,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",10,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",10,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",10,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",10,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",10,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",10,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",10,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",10,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",10,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",10,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",10,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",10,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",10,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",10,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",10,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",10,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",10,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",10,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",10,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",10,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",10,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",10,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",10,null],[13,"Locked","","423 Locked [RFC4918]",10,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",10,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",10,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",10,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",10,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",10,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",10,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",10,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",10,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",10,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",10,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",10,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",10,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",10,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",10,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",10,null],[13,"NotExtended","","510 Not Extended [RFC2774]",10,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",10,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",10,null],[0,"header","","Headers container, and common header fields.",null,null],[0,"parsing","jsonrpc_http_server::request_response::header","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","jsonrpc_http_server::request_response::header::parsing","Reads a single raw string when parsing a header.",null,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",11,null],[12,"language_tag","","The human language details of the `value`, if available.",11,null],[12,"value","","The parameter value, as expressed in octets.",11,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[8,"Header","jsonrpc_http_server::request_response::header","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",12,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",12,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[10,"fmt_header","","Format a header to be output into a TcpStream.",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls `fmt_header`.",null,null],[12,"0","","",13,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",14,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",15,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",16,null],[12,"quality","","The quality (client or server preference) for the value.",16,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",17,null],[13,"Ext","","Every value other than `no-cache`.",17,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",18,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",19,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",20,null],[13,"Items","","Only the listed items are a match",20,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",21,null],[3,"Raw","","A raw header value.",null,null],[3,"Cookie","","",null,null],[12,"name","","",22,null],[12,"value","","",22,null],[12,"expires","","",22,null],[12,"max_age","","",22,null],[12,"domain","","",22,null],[12,"path","","",22,null],[12,"secure","","",22,null],[12,"httponly","","",22,null],[12,"custom","","",22,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",23,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",24,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",24,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",25,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",26,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",27,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",27,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",27,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",27,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",27,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",27,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",27,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",28,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",28,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",28,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",29,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",30,null],[13,"ReturnRepresentation","","\"return=representation\"",30,null],[13,"ReturnMinimal","","\"return=minimal\"",30,null],[13,"HandlingStrict","","\"handling=strict\"",30,null],[13,"HandlingLeniant","","\"handling=leniant\"",30,null],[13,"Wait","","\"wait=delta\"",30,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",30,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",31,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",32,null],[13,"Null","","A hidden origin",32,null],[13,"Value","","Allow one particular origin",32,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",33,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",34,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",34,null],[13,"Last","","Get last x bytes (\"-x\")",34,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",35,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",35,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",36,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",37,null],[13,"Items","","Only the listed items are a match",37,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",38,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",38,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",39,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",39,null],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",41,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",42,null],[12,"parameters","","Disposition parameters",42,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",43,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",44,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",45,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",46,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",47,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Warning","","`Warning` header, defined in RFC7234",null,null],[12,"code","","The 3 digit warn code.",48,null],[12,"agent","","The name or pseudonym of the server adding this header.",48,null],[12,"text","","The warning message describing the error.",48,null],[12,"date","","An optional warning date.",48,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",49,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",50,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",50,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",50,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",50,null],[13,"Unregistered","","Any other protocol name not known to hyper",50,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",51,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",52,null],[3,"CookieJar","","A jar of cookies for managing a session",null,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",53,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",54,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",55,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",55,null],[13,"Unregistered","","The given range unit is not registered at IANA.",55,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",56,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",56,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",57,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",58,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",59,null],[13,"Items","","Only the listed items are a match",59,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",60,null],[13,"Close","","The `close` connection value.",60,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",60,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",61,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",62,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",63,null],[13,"Iso_8859_1","","ISO-8859-1",63,null],[13,"Iso_8859_2","","ISO-8859-2",63,null],[13,"Iso_8859_3","","ISO-8859-3",63,null],[13,"Iso_8859_4","","ISO-8859-4",63,null],[13,"Iso_8859_5","","ISO-8859-5",63,null],[13,"Iso_8859_6","","ISO-8859-6",63,null],[13,"Iso_8859_7","","ISO-8859-7",63,null],[13,"Iso_8859_8","","ISO-8859-8",63,null],[13,"Iso_8859_9","","ISO-8859-9",63,null],[13,"Iso_8859_10","","ISO-8859-10",63,null],[13,"Shift_Jis","","Shift_JIS",63,null],[13,"Euc_Jp","","EUC-JP",63,null],[13,"Iso_2022_Kr","","ISO-2022-KR",63,null],[13,"Euc_Kr","","EUC-KR",63,null],[13,"Iso_2022_Jp","","ISO-2022-JP",63,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",63,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",63,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",63,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",63,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",63,null],[13,"Gb2312","","GB2312",63,null],[13,"Big5","","Big5",63,null],[13,"Koi8_R","","KOI8-R",63,null],[13,"Ext","","An arbitrary charset specified as a string",63,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",64,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",65,null],[13,"Gzip","","The `gzip` encoding.",65,null],[13,"Deflate","","The `deflate` encoding.",65,null],[13,"Compress","","The `compress` encoding.",65,null],[13,"Identity","","The `identity` encoding.",65,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",65,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",66,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",67,null],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",null,null],[12,"0","","",68,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",69,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",70,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",71,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",72,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",73,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",74,null],[13,"Date","","The date when the client retrieved the resource",74,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",75,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",75,null],[13,"SameOrigin","","`same-origin`",75,null],[13,"Origin","","`origin`",75,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",75,null],[13,"UnsafeUrl","","`unsafe-url`",75,null],[13,"StrictOrigin","","`strict-origin`",75,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",75,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",76,null],[12,"port","","An optional port number.",76,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",77,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",78,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",79,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",80,null],[13,"NoStore","","\"no-store\"",80,null],[13,"NoTransform","","\"no-transform\"",80,null],[13,"OnlyIfCached","","\"only-if-cached\"",80,null],[13,"MaxAge","","\"max-age=delta\"",80,null],[13,"MaxStale","","\"max-stale=delta\"",80,null],[13,"MinFresh","","\"min-fresh=delta\"",80,null],[13,"MustRevalidate","","\"must-revalidate\"",80,null],[13,"Public","","\"public\"",80,null],[13,"Private","","\"private\"",80,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",80,null],[13,"SMaxAge","","\"s-maxage=delta\"",80,null],[13,"Extension","","Extension directives. Optionally include an argument.",80,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",81,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",82,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",83,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",84,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",84,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",85,null],[12,"range","jsonrpc_http_server::request_response::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",85,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",85,null],[13,"Unregistered","jsonrpc_http_server::request_response::header","Custom range, with unit not registered at IANA",85,null],[12,"unit","jsonrpc_http_server::request_response::header::ContentRangeSpec","other-range-unit",85,null],[12,"resp","","other-range-resp",85,null],[3,"ContentRange","jsonrpc_http_server::request_response::header","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",86,null],[3,"Request","jsonrpc_http_server::request_response","Simple client Request structure",null,null],[12,"method","","Request method",87,null],[12,"content","","Request content",87,null],[12,"cors_header","","CORS header to respond with",87,null],[3,"Response","","Simple server response structure",null,null],[12,"code","","Response code",88,null],[12,"content_type","","Response content type",88,null],[12,"content","","Response body",88,null],[12,"write_pos","","Number of bytes already written",88,null],[11,"empty","","Create empty `Request`",87,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","Create response with empty body and 200 OK status code.",88,{"inputs":[],"output":{"name":"self"}}],[11,"ok","","Create response with given body and 200 OK status code.",88,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"host_not_allowed","","Create response for not allowed hosts.",88,{"inputs":[],"output":{"name":"self"}}],[11,"unsupported_content_type","","Create response for unsupported content type.",88,{"inputs":[],"output":{"name":"self"}}],[11,"method_not_allowed","","Create response for disallowed method used.",88,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_cors","","CORS invalid",88,{"inputs":[],"output":{"name":"self"}}],[11,"on_request","","",88,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"next"}}],[11,"on_request_readable","","",88,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":{"name":"next"}}],[11,"on_response","","",88,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"next"}}],[11,"on_response_writable","","This event occurs each time the `Response` is ready to be written to.",88,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":{"name":"next"}}],[11,"new","jsonrpc_http_server","Create new request handler.",89,{"inputs":[{"name":"rpc"},{"name":"option"},{"name":"option"},{"name":"arc"},{"name":"control"}],"output":{"name":"self"}}],[11,"on_request","","",89,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"next"}}],[11,"on_request_readable","","This event occurs each time the `Request` is ready to be read from.",89,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":{"name":"next"}}],[11,"on_response","","This event occurs after the first time this handled signals `Next::write()`.",89,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"next"}}],[11,"on_response_writable","","This event occurs each time the `Response` is ready to be written to.",89,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":{"name":"next"}}],[6,"ServerResult","","Result of starting the Server.",null,null],[8,"RequestMiddleware","","Allows to intercept request and handle it differently.",null,null],[10,"on_request","","Takes a request and decides how to proceed with it.",90,{"inputs":[{"name":"self"},{"name":"request"},{"name":"control"}],"output":{"name":"requestmiddlewareaction"}}],[8,"MetaExtractor","","Extracts metadata from the HTTP request.",null,null],[11,"read_metadata","","Read the metadata from the request",91,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"m"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Creates new `ServerBuilder` for given `IoHandler`.",92,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"event_loop_remote","","Utilize existing event loop remote to poll RPC results.",92,{"inputs":[{"name":"self"},{"name":"remote"}],"output":{"name":"self"}}],[11,"cors","","Configures a list of allowed CORS origins.",92,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"self"}}],[11,"request_middleware","","Configures request middleware",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"meta_extractor","","Configures metadata extractor",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"allow_only_bind_host","","Allow connections only with `Host` header set to binding address.",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"allowed_hosts","","Specify a list of valid `Host` headers. Binding address is allowed automatically.",92,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"self"}}],[11,"start_http","","Start this JSON-RPC HTTP server trying to bind to specified `SocketAddr`.",92,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"serverresult"}}],[11,"addrs","","Returns addresses of this server",93,null],[11,"close","","Closes the server.",93,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Will block, waiting for the server to finish.",93,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `Host` given hostname and port number.",94,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"host"}}],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",94,{"inputs":[{"name":"str"}],"output":{"name":"host"}}],[11,"eq","jsonrpc_http_server::request_response::header","",22,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"languagetag"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",81,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",77,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",73,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",72,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"safe","jsonrpc_http_server::request_response","Whether a method is considered \"safe\", meaning the request is essentially read-only.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","jsonrpc_http_server::request_response::header","",62,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",14,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",14,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",14,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",14,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",14,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",14,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",14,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",14,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","","",77,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",73,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"partial_cmp","jsonrpc_http_server::request_response","",10,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"partial_cmp","jsonrpc_http_server::request_response::header","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header::parsing","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header::parsing","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","jsonrpc_http_server::request_response::header","",99,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_http_server::request_response","",10,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_http_server::request_response::header","",51,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_http_server::request_response::header::parsing","",11,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"index","jsonrpc_http_server::request_response::header","",97,null],[11,"from_iter","","",99,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"as_ref","jsonrpc_http_server::request_response","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"method"}}],[11,"default","jsonrpc_http_server::request_response::header","",78,{"inputs":[],"output":{"name":"quality"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"headers"}}],[11,"default","jsonrpc_http_server::request_response","",10,{"inputs":[],"output":{"name":"statuscode"}}],[11,"scheme","jsonrpc_http_server::request_response::header","",35,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",26,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",101,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",101,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",83,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",83,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",79,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",79,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",76,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",17,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",84,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",84,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",70,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",19,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",81,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",81,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",71,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",71,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",68,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",86,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",86,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",69,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",77,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",77,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",73,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",15,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","jsonrpc_http_server::request_response","",10,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","jsonrpc_http_server::request_response::header","",43,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"from","","",97,{"inputs":[{"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"string"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"str"}],"output":{"name":"raw"}}],[11,"from","","",97,null],[11,"from_str","jsonrpc_http_server::request_response","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","jsonrpc_http_server::request_response::header","",55,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",35,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",85,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",76,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",39,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",38,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",84,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",50,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",63,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",43,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","jsonrpc_http_server::request_response","",9,null],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"clone","jsonrpc_http_server::request_response::header","",51,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"contentlocation"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"warning"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"clone","jsonrpc_http_server::request_response::header::parsing","",11,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"clone","jsonrpc_http_server::request_response::header","",99,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"contains","jsonrpc_http_server::request_response::header::parsing","",98,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","jsonrpc_http_server::request_response","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header::parsing","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::request_response::header","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","jsonrpc_http_server","",102,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"from","","",102,{"inputs":[{"name":"t"}],"output":{"name":"origin"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"from","","",94,{"inputs":[{"name":"t"}],"output":{"name":"host"}}],[11,"from","","",0,{"inputs":[{"name":"option"}],"output":{"name":"domainsvalidation"}}],[11,"deref","","",102,null],[11,"deref","","",94,null],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",94,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"corsheader"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"domainsvalidation"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","jsonrpc_http_server::tokio_core::io","",103,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_http_server::tokio_core::reactor","",104,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"as_mut","jsonrpc_http_server::tokio_core::io","",105,null],[11,"as_ref","","",103,null],[11,"as_ref","","",105,null],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",110,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::net","",113,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::reactor","",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cmp","jsonrpc_http_server::tokio_core::io","",103,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"ordering"}}],[11,"read","","",117,null],[11,"read","jsonrpc_http_server::tokio_core::net","",118,null],[11,"read","jsonrpc_http_server::tokio_core::reactor","",119,null],[11,"write","jsonrpc_http_server::tokio_core::io","",120,null],[11,"flush","","",120,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_http_server::tokio_core::net","",118,null],[11,"flush","","",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_http_server::tokio_core::reactor","",119,null],[11,"flush","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","jsonrpc_http_server::tokio_core::io","",103,{"inputs":[{"name":"vec"}],"output":{"name":"easybuf"}}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"drop","","",121,null],[11,"drop","jsonrpc_http_server::tokio_core::reactor","",119,null],[11,"drop","","",116,null],[11,"drop","","",122,null],[11,"into","jsonrpc_http_server::tokio_core::io","",103,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::net","",124,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_http_server::tokio_core::reactor","",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","jsonrpc_http_server::tokio_core::net","",118,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",118,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","",118,null],[11,"write_vec","","",118,null],[11,"poll_read","jsonrpc_http_server::tokio_core::reactor","",119,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",119,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"start_send","jsonrpc_http_server::tokio_core::io","",123,null],[11,"poll_complete","","",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_send","jsonrpc_http_server::tokio_core::net","",125,null],[11,"poll_complete","","",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","jsonrpc_http_server::tokio_core::io","",103,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::tokio_core::net","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_http_server::tokio_core::reactor","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","jsonrpc_http_server::tokio_core::io","",103,null],[11,"hash","jsonrpc_http_server::tokio_core::reactor","",104,null],[11,"as_raw_fd","jsonrpc_http_server::tokio_core::net","",118,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",126,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",127,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"prepare_uninitialized_buffer","","",118,null],[11,"read_buf","","",118,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"clone","jsonrpc_http_server::tokio_core::io","",103,{"inputs":[{"name":"self"}],"output":{"name":"easybuf"}}],[11,"clone","jsonrpc_http_server::tokio_core::reactor","",104,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown","jsonrpc_http_server::tokio_core::net","",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_buf","","",118,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"shutdown","jsonrpc_http_server::tokio_core::reactor","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","jsonrpc_http_server::tokio_core::io","",121,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","jsonrpc_http_server","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",102,{"inputs":[{"name":"originprotocol"},{"name":"str"},{"name":"option"}],"output":{"name":"origin"}}],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",102,{"inputs":[{"name":"str"}],"output":{"name":"origin"}}],[11,"poll_write","jsonrpc_http_server::tokio_core::io","Calls the underlying `poll_write` function on this handling, testing to see if it's ready to be written to.",120,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_read","","Calls the underlying `poll_read` function on this handling, testing to see if it's ready to be read from.",117,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"new","","Creates a new EasyBuf with no data and the default capacity.",103,{"inputs":[],"output":{"name":"easybuf"}}],[11,"with_capacity","","Creates a new EasyBuf with `cap` capacity.",103,{"inputs":[{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"len","","Returns the number of bytes contained in this `EasyBuf`.",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","Returns the inner contents of this `EasyBuf` as a slice.",103,null],[11,"split_off","","Splits the buffer into two at the given index.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"drain_to","","Splits the buffer into two at the given index.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"get_mut","","Returns a mutable reference to the underlying growable buffer of bytes.",103,{"inputs":[{"name":"self"}],"output":{"name":"easybufmut"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",105,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"connect","jsonrpc_http_server::tokio_core::net","Create a new TCP stream connected to the specified address.",118,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",118,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",118,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",118,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",118,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",118,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",118,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",118,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",118,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",126,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",126,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",126,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",126,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",126,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",126,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",127,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",127,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",127,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",127,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",127,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",127,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",127,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",127,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",127,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",127,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",127,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",127,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",127,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",127,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",127,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",127,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",125,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",125,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",125,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","jsonrpc_http_server::tokio_core::reactor","Creates a new event loop, returning any error that happened during the creation.",128,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",128,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",128,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",128,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",128,null],[11,"id","","Get the ID of this loop",128,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",129,null],[11,"id","","Return the ID of the represented Core",129,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",130,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",130,null],[11,"spawn_fn","","Spawns a closure on this event loop.",130,null],[11,"id","","Return the ID of the represented Core",130,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",122,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",122,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",119,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",119,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",119,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",119,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",119,null],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",119,null],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",119,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",119,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",119,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",116,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",116,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"name":"result"}}],[11,"map","jsonrpc_http_server","Maps `Ok` variant of `CorsHeader`.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"corsheader"}}],[11,"canonical_reason","jsonrpc_http_server::request_response","Get the standardised `reason-phrase` for this status code.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",10,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","jsonrpc_http_server::request_response::header","Creates a new, empty headers map.",99,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",99,null],[11,"get","","Get a reference to the header field's value, if it exists.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the header fields.",99,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",99,null],[11,"get_raw","","Access the raw value of a header.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",99,null],[11,"remove_raw","","Remove a header by name.",99,null],[11,"is","","Check if a HeaderView is a certain Header.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",100,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",16,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"len","","Returns the amount of lines.",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"one","","Returns the line if there is only 1.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate the lines of raw bytes.",97,{"inputs":[{"name":"self"}],"output":{"name":"rawlines"}}],[11,"push","","Append a line to this `Raw` header value.",97,null],[11,"new","","",22,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",22,{"inputs":[{"name":"self"}],"output":{"name":"attrval"}}],[11,"new","","Creates a new Protocol with the given name and version",24,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",27,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",27,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using calculated delta.",33,{"inputs":[{"name":"cookiejar"}],"output":{"name":"setcookie"}}],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar. Note that this will `panic!` if `CookieJar` is not root.",33,null],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",38,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",38,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"new","","Creates a new `Origin` header.",39,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used to manipulate cookies and create a corresponding `SetCookie` header afterwards.",45,null],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header. Useful for clients.",45,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookie"}}],[11,"new","","Creates a new empty cookie jar with the given signing key.",95,null],[11,"add_original","","Adds an original cookie from a request.",95,null],[11,"add","","Adds a new cookie to this cookie jar.",95,null],[11,"remove","","Removes a cookie from this cookie jar.",95,null],[11,"clear","","Clears all cookies from this cookie jar.",95,null],[11,"find","","Finds a cookie inside of this cookie jar.",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",95,{"inputs":[{"name":"self"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time, returning a vector of `Set-Cookie` headers.",95,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",95,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",61,{"inputs":[],"output":{"name":"transferencoding"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",69,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",69,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",69,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",69,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",69,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",69,{"inputs":[],"output":{"name":"contenttype"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",71,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",71,{"inputs":[],"output":{"name":"connection"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",84,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",84,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}]],"paths":[[4,"DomainsValidation"],[4,"AccessControlAllowOrigin"],[8,"Io"],[8,"Codec"],[8,"UdpCodec"],[4,"CorsHeader"],[3,"Rpc"],[4,"Error"],[4,"RequestMiddlewareAction"],[4,"Method"],[4,"StatusCode"],[3,"ExtendedValue"],[8,"Header"],[3,"HeaderFormatter"],[3,"EntityTag"],[3,"IfUnmodifiedSince"],[3,"QualityItem"],[4,"Pragma"],[3,"AccessControlExposeHeaders"],[3,"AccessControlRequestHeaders"],[4,"IfMatch"],[3,"AcceptRanges"],[3,"Cookie"],[3,"Authorization"],[3,"Protocol"],[3,"From"],[3,"Bearer"],[3,"LanguageTag"],[4,"DispositionType"],[3,"Date"],[4,"Preference"],[4,"Expect"],[4,"AccessControlAllowOrigin"],[3,"SetCookie"],[4,"ByteRangeSpec"],[3,"Basic"],[3,"AcceptCharset"],[4,"IfNoneMatch"],[4,"Range"],[3,"Origin"],[3,"Allow"],[3,"UserAgent"],[3,"ContentDisposition"],[3,"HttpDate"],[3,"AccessControlAllowMethods"],[3,"Cookie"],[3,"Referer"],[8,"Scheme"],[3,"Warning"],[3,"ContentLanguage"],[4,"ProtocolName"],[3,"Accept"],[3,"AcceptEncoding"],[3,"Upgrade"],[3,"Server"],[4,"RangeUnit"],[4,"DispositionParam"],[3,"AccessControlAllowHeaders"],[3,"Location"],[4,"Vary"],[4,"ConnectionOption"],[3,"TransferEncoding"],[3,"AccessControlRequestMethod"],[4,"Charset"],[3,"ContentEncoding"],[4,"Encoding"],[3,"Expires"],[3,"Prefer"],[3,"ContentLocation"],[3,"ContentType"],[3,"AccessControlMaxAge"],[3,"Connection"],[3,"LastModified"],[3,"IfModifiedSince"],[4,"IfRange"],[4,"ReferrerPolicy"],[3,"Host"],[3,"ETag"],[3,"Quality"],[3,"ContentLength"],[4,"CacheDirective"],[3,"AcceptLanguage"],[3,"PreferenceApplied"],[3,"CacheControl"],[3,"StrictTransportSecurity"],[4,"ContentRangeSpec"],[3,"ContentRange"],[3,"Request"],[3,"Response"],[3,"ServerHandler"],[8,"RequestMiddleware"],[8,"MetaExtractor"],[3,"ServerBuilder"],[3,"Server"],[3,"Host"],[3,"CookieJar"],[3,"HeadersItems"],[3,"Raw"],[3,"HTTP_VALUE"],[3,"Headers"],[3,"HeaderView"],[3,"AccessControlAllowCredentials"],[3,"Origin"],[3,"EasyBuf"],[3,"CoreId"],[3,"Window"],[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Read"],[3,"ReadUntil"],[3,"WriteAll"],[3,"TcpStreamNew"],[3,"SendDgram"],[3,"RecvDgram"],[3,"Timeout"],[3,"ReadHalf"],[3,"TcpStream"],[3,"PollEvented"],[3,"WriteHalf"],[3,"EasyBufMut"],[3,"Interval"],[3,"Framed"],[3,"Incoming"],[3,"UdpFramed"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Core"],[3,"Remote"],[3,"Handle"]]};
searchIndex["jsonrpc_ipc_server"] = {"doc":"Cross-platform JSON-RPC IPC transport.","items":[[0,"io","jsonrpc_ipc_server::tokio_core","I/O conveniences when working with primitives in `tokio-core`",null,null],[6,"IoFuture","jsonrpc_ipc_server::tokio_core::io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"Io","","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this I/O object may be writable.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","Read in a list of buffers all at once.",0,null],[11,"write_vec","","Write a list of buffers all at once.",0,null],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",0,null],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[8,"Codec","","Encoding and decoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",1,null],[16,"Out","","The type of frames to be encoded.",1,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",1,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",1,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[3,"WriteHalf","","The writable half of an object returned from `Io::split`.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying `Io` object, using the `Codec` trait to encode and decode frames.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"EasyBufMut","","An RAII object returned from `get_mut` which provides mutable access to the underlying `Vec<u8>`.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"ReadHalf","","The readable half of an object returned from `Io::split`.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"name":"vec"}],"output":{"name":"readuntil"}}],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"EasyBuf","","A reference counted buffer of bytes.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[0,"net","jsonrpc_ipc_server::tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[8,"UdpCodec","jsonrpc_ipc_server::tokio_core::net","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",2,null],[16,"Out","","The type of frames to be encoded.",2,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",2,null],[10,"encode","","Encodes a frame into the buffer provided.",2,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[0,"reactor","jsonrpc_ipc_server::tokio_core","The core reactor driving all I/O",null,null],[3,"Core","jsonrpc_ipc_server::tokio_core::reactor","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"PollEvented","","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"RequestContext","jsonrpc_ipc_server","Request context",null,null],[12,"endpoint_addr","","Remote UDS endpoint",3,null],[3,"Server","","IPC Server handle",null,null],[3,"ServerBuilder","","IPC server builder",null,null],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"serverbuilder"}}],[11,"event_loop_remote","","Sets shared different event loop remote.",4,{"inputs":[{"name":"self"},{"name":"remote"}],"output":{"name":"self"}}],[11,"session_metadata_extractor","","Sets session metadata extractor.",4,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"self"}}],[11,"start","","Run server (in a separate thread)",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"close","","Closes the server (waits for finish)",5,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Wait for the server to finish",5,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[8,"MetaExtractor","","Metadata extractor (per session)",null,null],[10,"extract","","Extracts metadata from request context",6,{"inputs":[{"name":"self"},{"name":"requestcontext"}],"output":{"name":"m"}}],[11,"eq","jsonrpc_ipc_server::tokio_core::io","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_ipc_server::tokio_core::reactor","",8,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"as_mut","jsonrpc_ipc_server::tokio_core::io","",9,null],[11,"as_ref","","",7,null],[11,"as_ref","","",9,null],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_ipc_server::tokio_core::net","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_ipc_server::tokio_core::reactor","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cmp","jsonrpc_ipc_server::tokio_core::io","",7,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"ordering"}}],[11,"read","","",21,null],[11,"read","jsonrpc_ipc_server::tokio_core::net","",22,null],[11,"read","jsonrpc_ipc_server::tokio_core::reactor","",23,null],[11,"write","jsonrpc_ipc_server::tokio_core::io","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_ipc_server::tokio_core::net","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_ipc_server::tokio_core::reactor","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","jsonrpc_ipc_server::tokio_core::io","",7,{"inputs":[{"name":"vec"}],"output":{"name":"easybuf"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"drop","","",25,null],[11,"drop","jsonrpc_ipc_server::tokio_core::reactor","",23,null],[11,"drop","","",20,null],[11,"drop","","",26,null],[11,"into","jsonrpc_ipc_server::tokio_core::io","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_ipc_server::tokio_core::net","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_ipc_server::tokio_core::reactor","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","jsonrpc_ipc_server::tokio_core::net","",22,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",22,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","",22,null],[11,"write_vec","","",22,null],[11,"poll_read","jsonrpc_ipc_server::tokio_core::reactor","",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"start_send","jsonrpc_ipc_server::tokio_core::io","",27,null],[11,"poll_complete","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_send","jsonrpc_ipc_server::tokio_core::net","",29,null],[11,"poll_complete","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","jsonrpc_ipc_server::tokio_core::io","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_ipc_server::tokio_core::net","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_ipc_server::tokio_core::reactor","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","jsonrpc_ipc_server::tokio_core::io","",7,null],[11,"hash","jsonrpc_ipc_server::tokio_core::reactor","",8,null],[11,"as_raw_fd","jsonrpc_ipc_server::tokio_core::net","",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",30,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"prepare_uninitialized_buffer","","",22,null],[11,"read_buf","","",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"clone","jsonrpc_ipc_server::tokio_core::io","",7,{"inputs":[{"name":"self"}],"output":{"name":"easybuf"}}],[11,"clone","jsonrpc_ipc_server::tokio_core::reactor","",8,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown","jsonrpc_ipc_server::tokio_core::net","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_buf","","",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"shutdown","jsonrpc_ipc_server::tokio_core::reactor","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","jsonrpc_ipc_server::tokio_core::io","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"poll_write","","Calls the underlying `poll_write` function on this handling, testing to see if it's ready to be written to.",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_read","","Calls the underlying `poll_read` function on this handling, testing to see if it's ready to be read from.",21,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"new","","Creates a new EasyBuf with no data and the default capacity.",7,{"inputs":[],"output":{"name":"easybuf"}}],[11,"with_capacity","","Creates a new EasyBuf with `cap` capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"len","","Returns the number of bytes contained in this `EasyBuf`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","Returns the inner contents of this `EasyBuf` as a slice.",7,null],[11,"split_off","","Splits the buffer into two at the given index.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"drain_to","","Splits the buffer into two at the given index.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"get_mut","","Returns a mutable reference to the underlying growable buffer of bytes.",7,{"inputs":[{"name":"self"}],"output":{"name":"easybufmut"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",9,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"connect","jsonrpc_ipc_server::tokio_core::net","Create a new TCP stream connected to the specified address.",22,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",22,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",22,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",22,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",22,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",22,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",22,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",30,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",30,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",30,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",30,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",30,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",31,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",31,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",31,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",31,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",31,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",31,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",31,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",31,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",31,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",31,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",31,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",31,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",31,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",29,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",29,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","jsonrpc_ipc_server::tokio_core::reactor","Creates a new event loop, returning any error that happened during the creation.",32,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",32,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",32,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",32,null],[11,"id","","Get the ID of this loop",32,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",33,null],[11,"id","","Return the ID of the represented Core",33,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",34,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",34,null],[11,"spawn_fn","","Spawns a closure on this event loop.",34,null],[11,"id","","Return the ID of the represented Core",34,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",26,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",26,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",23,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",23,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",23,null],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",23,null],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",23,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",23,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",23,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",20,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",20,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"name":"result"}}]],"paths":[[8,"Io"],[8,"Codec"],[8,"UdpCodec"],[3,"RequestContext"],[3,"ServerBuilder"],[3,"Server"],[8,"MetaExtractor"],[3,"EasyBuf"],[3,"CoreId"],[3,"Window"],[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Read"],[3,"ReadUntil"],[3,"WriteAll"],[3,"TcpStreamNew"],[3,"SendDgram"],[3,"RecvDgram"],[3,"Timeout"],[3,"ReadHalf"],[3,"TcpStream"],[3,"PollEvented"],[3,"WriteHalf"],[3,"EasyBufMut"],[3,"Interval"],[3,"Framed"],[3,"Incoming"],[3,"UdpFramed"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Core"],[3,"Remote"],[3,"Handle"]]};
searchIndex["jsonrpc_macros"] = {"doc":"","items":[[3,"Trailing","jsonrpc_macros","A wrapper type without an implementation of `Deserialize` which allows a special implementation of `Wrap` for functions that take a trailing default parameter.",null,null],[12,"0","","",0,null],[3,"IoDelegate","","A set of RPC methods and notifications tied to single `delegate` struct.",null,null],[5,"to_value","","",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[11,"new","","Creates new `IoDelegate`",1,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"add_alias","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"add_method","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_async_method","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_method_with_meta","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_notification","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"add_subscription","","",1,null],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[0,"pubsub","","",null,null],[4,"SubscriptionId","jsonrpc_macros::pubsub","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",null,null],[13,"Number","","U64 number",2,null],[13,"String","","String",2,null],[3,"Subscriber","","",null,null],[3,"Sink","","",null,null],[11,"new","","",3,{"inputs":[{"name":"subscriber"}],"output":{"name":"self"}}],[11,"reject","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"result"}}],[11,"assign_id","","",3,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"result"}}],[11,"send","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"sinkresult"}}],[14,"metadata","jsonrpc_macros","Auto-generates an RPC trait from trait definition.",null,null],[14,"build_rpc_trait","","",null,null],[11,"parse_value","jsonrpc_macros::pubsub","Parses `core::Value` into unique subscription id.",2,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"subscriptionid"}}]],"paths":[[3,"Trailing"],[3,"IoDelegate"],[4,"SubscriptionId"],[3,"Subscriber"],[3,"Sink"]]};
searchIndex["jsonrpc_minihttp_server"] = {"doc":"jsonrpc http server.","items":[[0,"cors","jsonrpc_minihttp_server","CORS handling utility functions",null,null],[4,"OriginProtocol","jsonrpc_minihttp_server::cors","Origin Protocol",null,null],[13,"Http","","Http protocol",0,null],[13,"Https","","Https protocol",0,null],[13,"Custom","","Custom protocol",0,null],[3,"Origin","","Request Origin",null,null],[4,"AccessControlAllowOrigin","","Origins allowed to access",null,null],[13,"Value","","Specific hostname",1,null],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,null],[13,"Any","","Any non-null origin",1,null],[4,"CorsHeader","","CORS Header Result.",null,null],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",2,null],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",2,null],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",2,null],[5,"get_cors_header","","Returns correct CORS header (if any) given list of allowed origins and current origin.",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"corsheader"}}],[3,"Host","jsonrpc_minihttp_server","Host type",null,null],[4,"DomainsValidation","","Specifies if domains should be validated.",null,null],[13,"AllowOnly","","Allow only domains on the list.",3,null],[13,"Disabled","","Disable domains validation completely.",3,null],[3,"Req","","Request",null,null],[3,"ServerBuilder","","Convenient JSON-RPC HTTP Server builder.",null,null],[3,"RpcService","","Tokio-proto JSON-RPC HTTP Service",null,null],[3,"Server","","jsonrpc http server instance",null,null],[4,"Error","","RPC Server startup error.",null,null],[13,"Io","","IO Error",4,null],[11,"new","","Creates new `Req` object",5,{"inputs":[{"name":"request"}],"output":{"name":"self"}}],[11,"method","","Returns request method",5,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header","","Returns value of first header with given name. `None` if header is not found or value is not utf-8 encoded",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"body","","Returns body of the request as a string",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"ServerResult","","Result of starting the Server.",null,null],[8,"MetaExtractor","","Extracts metadata from the HTTP request.",null,null],[11,"read_metadata","","Read the metadata from the request",6,{"inputs":[{"name":"self"},{"name":"req"}],"output":{"name":"m"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","Creates new `ServerBuilder` for given `IoHandler`.",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"threads","","Sets number of threads of the server to run. Panics when set to `0`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"cors","","Configures a list of allowed CORS origins.",7,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"self"}}],[11,"meta_extractor","","Configures metadata extractor",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"allow_only_bind_host","","Allow connections only with `Host` header set to binding address.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"allowed_hosts","","Specify a list of valid `Host` headers. Binding address is allowed automatically.",7,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"self"}}],[11,"start_http","","Start this JSON-RPC HTTP server trying to bind to specified `SocketAddr`.",7,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"serverresult"}}],[11,"call","","",8,null],[11,"address","","Returns addresses of this server",9,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"close","","Closes the server.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Will block, waiting for the server to finish.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","jsonrpc_minihttp_server::cors","",0,{"inputs":[{"name":"self"},{"name":"originprotocol"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"originprotocol"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_minihttp_server","",11,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"from","jsonrpc_minihttp_server::cors","",10,{"inputs":[{"name":"t"}],"output":{"name":"origin"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"from","jsonrpc_minihttp_server","",11,{"inputs":[{"name":"t"}],"output":{"name":"host"}}],[11,"from","","",3,{"inputs":[{"name":"option"}],"output":{"name":"domainsvalidation"}}],[11,"deref","jsonrpc_minihttp_server::cors","",10,null],[11,"deref","jsonrpc_minihttp_server","",11,null],[11,"into","jsonrpc_minihttp_server::cors","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into","jsonrpc_minihttp_server","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","jsonrpc_minihttp_server::cors","",0,null],[11,"hash","jsonrpc_minihttp_server","",11,null],[11,"fmt","jsonrpc_minihttp_server::cors","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_minihttp_server","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","jsonrpc_minihttp_server::cors","",0,{"inputs":[{"name":"self"}],"output":{"name":"originprotocol"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"corsheader"}}],[11,"clone","jsonrpc_minihttp_server","",11,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"domainsvalidation"}}],[11,"fmt","jsonrpc_minihttp_server::cors","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",10,{"inputs":[{"name":"originprotocol"},{"name":"str"},{"name":"option"}],"output":{"name":"origin"}}],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",10,{"inputs":[{"name":"str"}],"output":{"name":"origin"}}],[11,"map","","Maps `Ok` variant of `CorsHeader`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"corsheader"}}],[11,"new","jsonrpc_minihttp_server","Creates a new `Host` given hostname and port number.",11,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"host"}}],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",11,{"inputs":[{"name":"str"}],"output":{"name":"host"}}]],"paths":[[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"CorsHeader"],[4,"DomainsValidation"],[4,"Error"],[3,"Req"],[8,"MetaExtractor"],[3,"ServerBuilder"],[3,"RpcService"],[3,"Server"],[3,"Origin"],[3,"Host"]]};
searchIndex["jsonrpc_pubsub"] = {"doc":"Publish-Subscribe extension for JSON-RPC","items":[[3,"PubSubHandler","jsonrpc_pubsub","Publish-Subscribe extension of `IoHandler`.",null,null],[3,"Session","","RPC client session Keeps track of active subscriptions and unsubscribes from them upon dropping.",null,null],[3,"Sink","","A handle to send notifications directly to subscribed client.",null,null],[3,"Subscriber","","Represents a subscribing client. Subscription handlers can either reject this subscription request or assign an unique id.",null,null],[4,"SubscriptionId","","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",null,null],[13,"Number","","U64 number",0,null],[13,"String","","String",0,null],[5,"new_subscription","","Creates new subscribe and unsubscribe RPC methods",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new `PubSubHandler`",1,{"inputs":[{"name":"metaiohandler"}],"output":{"name":"self"}}],[11,"add_subscription","","Adds new subscription.",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metaiohandler"}}],[11,"new","","Creates new session given transport raw send capabilities. Session should be created as part of metadata, `sender` should be returned by transport.",2,{"inputs":[{"name":"sender"}],"output":{"name":"self"}}],[11,"sender","","Returns transport write stream",2,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"on_drop","","Adds a function to call when session is dropped.",2,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"send","","Sends a notification to a client.",3,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"send"}}],[11,"assign_id","","Consumes `Subscriber` and assigns unique id to a requestor. Returns `Err` if request has already terminated.",4,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"result"}}],[11,"reject","","Rejects this subscription request with given error. Returns `Err` if request has already terminated.",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"subscriptionid"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"parse_value","","Parses `core::Value` into unique subscription id.",0,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[6,"SinkResult","","Subscription send result.",null,null],[8,"SubscribeRpcMethod","","Subscribe handler",null,null],[10,"call","","Called when client is requesting new subscription to be started.",5,{"inputs":[{"name":"self"},{"name":"params"},{"name":"m"},{"name":"subscriber"}],"output":null}],[8,"UnsubscribeRpcMethod","","Unsubscribe handler",null,null],[10,"call","","Called when client is requesting to cancel existing subscription.",6,{"inputs":[{"name":"self"},{"name":"subscriptionid"}],"output":{"name":"boxfuture"}}],[8,"PubSubMetadata","","Metadata extension for pub-sub method handling.",null,null],[10,"session","","Returns session object associated with given request/client. `None` indicates that sessions are not supported on the used transport.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"SubscriptionId"],[3,"PubSubHandler"],[3,"Session"],[3,"Sink"],[3,"Subscriber"],[8,"SubscribeRpcMethod"],[8,"UnsubscribeRpcMethod"],[8,"PubSubMetadata"]]};
searchIndex["jsonrpc_server_utils"] = {"doc":"JSON-RPC servers utilities.","items":[[0,"cors","jsonrpc_server_utils","CORS handling utility functions",null,null],[3,"Origin","jsonrpc_server_utils::cors","Request Origin",null,null],[4,"OriginProtocol","","Origin Protocol",null,null],[13,"Http","","Http protocol",0,null],[13,"Https","","Https protocol",0,null],[13,"Custom","","Custom protocol",0,null],[4,"AccessControlAllowOrigin","","Origins allowed to access",null,null],[13,"Value","","Specific hostname",1,null],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,null],[13,"Any","","Any non-null origin",1,null],[4,"CorsHeader","","CORS Header Result.",null,null],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",2,null],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",2,null],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",2,null],[5,"get_cors_header","","Returns correct CORS header (if any) given list of allowed origins and current origin.",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"corsheader"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"originprotocol"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"originprotocol"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"originprotocol"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",3,{"inputs":[{"name":"originprotocol"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deref","","",3,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"corsheader"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"corsheader"}],"output":{"name":"bool"}}],[11,"map","","Maps `Ok` variant of `CorsHeader`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"corsheader"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"hosts","jsonrpc_server_utils","Host header validation.",null,null],[3,"Host","jsonrpc_server_utils::hosts","Host type",null,null],[4,"DomainsValidation","","Specifies if domains should be validated.",null,null],[13,"AllowOnly","","Allow only domains on the list.",4,null],[13,"Disabled","","Disable domains validation completely.",4,null],[5,"is_host_valid","","Returns `true` when `Host` header is whitelisted in `allowed_hosts`.",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `Host` given hostname and port number.",5,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deref","","",5,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"domainsvalidation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"domainsvalidation"}],"output":{"name":"bool"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[0,"reactor","jsonrpc_server_utils","Event Loop Remote Either spawns a new event loop, or re-uses provided one.",null,null],[3,"RpcEventLoop","jsonrpc_server_utils::reactor","A handle to running event loop. Dropping the handle will cause event loop to finish.",null,null],[4,"UninitializedRemote","","Possibly uninitialized event loop remote.",null,null],[13,"Shared","","Shared instance of remote.",6,null],[13,"Unspawned","","Event Loop should be spawned by the transport.",6,null],[4,"Remote","","Initialized Remote",null,null],[13,"Shared","","Shared instance",7,null],[13,"Spawned","","Spawned Event Loop",7,null],[11,"initialize","","Initializes remote. In case there is no shared remote, will spawn a new event loop. Dropping `Remote` closes the loop.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"remote","","Get remote associated with this event loop.",7,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"close","","Closes underlying event loop (if any!).",7,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Wait for underlying event loop to finish (if any!).",7,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"spawn","","Spawns a new thread with `EventLoop` with given handler.",8,{"inputs":[],"output":{"name":"result"}}],[11,"remote","","Get remote for this event loop.",8,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"wait","","Blocks current thread and waits until the event loop is finished.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Finishes this event loop.",8,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"CorsHeader"],[3,"Origin"],[4,"DomainsValidation"],[3,"Host"],[4,"UninitializedRemote"],[4,"Remote"],[3,"RpcEventLoop"]]};
searchIndex["jsonrpc_tcp_server"] = {"doc":"jsonrpc server over tcp/ip","items":[[0,"io","jsonrpc_tcp_server::tokio_core","I/O conveniences when working with primitives in `tokio-core`",null,null],[6,"IoFuture","jsonrpc_tcp_server::tokio_core::io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"Io","","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this I/O object may be writable.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","Read in a list of buffers all at once.",0,null],[11,"write_vec","","Write a list of buffers all at once.",0,null],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",0,null],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[8,"Codec","","Encoding and decoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",1,null],[16,"Out","","The type of frames to be encoded.",1,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",1,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",1,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"result"}}],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[3,"WriteHalf","","The writable half of an object returned from `Io::split`.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying `Io` object, using the `Codec` trait to encode and decode frames.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"EasyBufMut","","An RAII object returned from `get_mut` which provides mutable access to the underlying `Vec<u8>`.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"ReadHalf","","The readable half of an object returned from `Io::split`.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"name":"vec"}],"output":{"name":"readuntil"}}],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"EasyBuf","","A reference counted buffer of bytes.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[0,"net","jsonrpc_tcp_server::tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[8,"UdpCodec","jsonrpc_tcp_server::tokio_core::net","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",2,null],[16,"Out","","The type of frames to be encoded.",2,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",2,null],[10,"encode","","Encodes a frame into the buffer provided.",2,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[0,"reactor","jsonrpc_tcp_server::tokio_core","The core reactor driving all I/O",null,null],[3,"Core","jsonrpc_tcp_server::tokio_core::reactor","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"PollEvented","","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"Dispatcher","jsonrpc_tcp_server","Peer-messages dispatcher.",null,null],[3,"RequestContext","","Request context",null,null],[12,"peer_addr","","Peer Address",3,null],[12,"sender","","Peer Sender channel",3,null],[3,"ServerBuilder","","TCP server builder",null,null],[3,"Server","","TCP Server handle",null,null],[4,"PushMessageError","","Push Message Error",null,null],[13,"NoSuchPeer","","Invalid peer",4,null],[13,"Send","","Send error",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"senderror"}],"output":{"name":"self"}}],[11,"new","","Creates a new dispatcher",5,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"push_message","","Pushes message to given peer",5,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"string"}],"output":{"name":"result"}}],[11,"is_connected","","Returns `true` if the peer is still connnected",5,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"peer_count","","Returns current peer count.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates new `SeverBuilder` wih given `IoHandler`",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"event_loop_remote","","Utilize existing event loop remote.",6,{"inputs":[{"name":"self"},{"name":"remote"}],"output":{"name":"self"}}],[11,"session_meta_extractor","","Sets session meta extractor",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"start","","Starts a new server",6,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"dispatcher","","Returns dispatcher",6,{"inputs":[{"name":"self"}],"output":{"name":"dispatcher"}}],[11,"close","","Closes the server (waits for finish)",7,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Wait for the server to finish",7,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"MetaExtractor","","Metadata extractor (per session)",null,null],[10,"extract","","Extracts metadata from request context",8,{"inputs":[{"name":"self"},{"name":"requestcontext"}],"output":{"name":"m"}}],[11,"eq","jsonrpc_tcp_server::tokio_core::io","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","jsonrpc_tcp_server::tokio_core::reactor","",10,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"as_mut","jsonrpc_tcp_server::tokio_core::io","",11,null],[11,"as_ref","","",9,null],[11,"as_ref","","",11,null],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_tcp_server::tokio_core::net","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_tcp_server::tokio_core::reactor","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cmp","jsonrpc_tcp_server::tokio_core::io","",9,{"inputs":[{"name":"self"},{"name":"easybuf"}],"output":{"name":"ordering"}}],[11,"read","","",23,null],[11,"read","jsonrpc_tcp_server::tokio_core::net","",24,null],[11,"read","jsonrpc_tcp_server::tokio_core::reactor","",25,null],[11,"write","jsonrpc_tcp_server::tokio_core::io","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_tcp_server::tokio_core::net","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","jsonrpc_tcp_server::tokio_core::reactor","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","jsonrpc_tcp_server::tokio_core::io","",9,{"inputs":[{"name":"vec"}],"output":{"name":"easybuf"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"drop","","",27,null],[11,"drop","jsonrpc_tcp_server::tokio_core::reactor","",25,null],[11,"drop","","",22,null],[11,"drop","","",28,null],[11,"into","jsonrpc_tcp_server::tokio_core::io","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_tcp_server::tokio_core::net","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","jsonrpc_tcp_server::tokio_core::reactor","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","jsonrpc_tcp_server::tokio_core::net","",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"read_vec","","",24,null],[11,"write_vec","","",24,null],[11,"poll_read","jsonrpc_tcp_server::tokio_core::reactor","",25,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",25,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"start_send","jsonrpc_tcp_server::tokio_core::io","",29,null],[11,"poll_complete","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_send","jsonrpc_tcp_server::tokio_core::net","",31,null],[11,"poll_complete","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","jsonrpc_tcp_server::tokio_core::io","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_tcp_server::tokio_core::net","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","jsonrpc_tcp_server::tokio_core::reactor","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","jsonrpc_tcp_server::tokio_core::io","",9,null],[11,"hash","jsonrpc_tcp_server::tokio_core::reactor","",10,null],[11,"as_raw_fd","jsonrpc_tcp_server::tokio_core::net","",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",32,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"prepare_uninitialized_buffer","","",24,null],[11,"read_buf","","",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"clone","jsonrpc_tcp_server::tokio_core::io","",9,{"inputs":[{"name":"self"}],"output":{"name":"easybuf"}}],[11,"clone","jsonrpc_tcp_server::tokio_core::reactor","",10,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown","jsonrpc_tcp_server::tokio_core::net","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_buf","","",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"shutdown","jsonrpc_tcp_server::tokio_core::reactor","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","jsonrpc_tcp_server::tokio_core::io","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"poll_write","","Calls the underlying `poll_write` function on this handling, testing to see if it's ready to be written to.",26,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",29,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",29,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_read","","Calls the underlying `poll_read` function on this handling, testing to see if it's ready to be read from.",23,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"new","","Creates a new EasyBuf with no data and the default capacity.",9,{"inputs":[],"output":{"name":"easybuf"}}],[11,"with_capacity","","Creates a new EasyBuf with `cap` capacity.",9,{"inputs":[{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"len","","Returns the number of bytes contained in this `EasyBuf`.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","Returns the inner contents of this `EasyBuf` as a slice.",9,null],[11,"split_off","","Splits the buffer into two at the given index.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"drain_to","","Splits the buffer into two at the given index.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"easybuf"}}],[11,"get_mut","","Returns a mutable reference to the underlying growable buffer of bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"easybufmut"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",11,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"connect","jsonrpc_tcp_server::tokio_core::net","Create a new TCP stream connected to the specified address.",24,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",24,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",24,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",24,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",24,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",24,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",32,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",32,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",32,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",33,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",33,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",33,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",33,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",33,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",33,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",33,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",33,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",33,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",33,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",33,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",33,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",31,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",31,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","jsonrpc_tcp_server::tokio_core::reactor","Creates a new event loop, returning any error that happened during the creation.",34,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",34,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",34,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",34,null],[11,"id","","Get the ID of this loop",34,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",35,null],[11,"id","","Return the ID of the represented Core",35,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",36,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",36,null],[11,"spawn_fn","","Spawns a closure on this event loop.",36,null],[11,"id","","Return the ID of the represented Core",36,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",28,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",28,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",25,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",25,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",25,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",25,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",25,null],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",25,null],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",25,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",25,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",25,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",22,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",22,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"name":"result"}}]],"paths":[[8,"Io"],[8,"Codec"],[8,"UdpCodec"],[3,"RequestContext"],[4,"PushMessageError"],[3,"Dispatcher"],[3,"ServerBuilder"],[3,"Server"],[8,"MetaExtractor"],[3,"EasyBuf"],[3,"CoreId"],[3,"Window"],[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Read"],[3,"ReadUntil"],[3,"WriteAll"],[3,"TcpStreamNew"],[3,"SendDgram"],[3,"RecvDgram"],[3,"Timeout"],[3,"ReadHalf"],[3,"TcpStream"],[3,"PollEvented"],[3,"WriteHalf"],[3,"EasyBufMut"],[3,"Interval"],[3,"Framed"],[3,"Incoming"],[3,"UdpFramed"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Core"],[3,"Remote"],[3,"Handle"]]};
initSearch(searchIndex);
